function root(env, context, frame, runtime, cb) {
var lineno = 0;
var colno = 0;
var output = "";
try {
var parentTemplate = null;
var t_1;
t_1 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"product") || runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "global")),"common")),"productInfo")),"product");
frame.set("product", t_1, true);
if(frame.topLevel) {
context.setVariable("product", t_1);
}
if(frame.topLevel) {
context.addExport("product", t_1);
}
var t_2;
t_2 = env.getFilter("int").call(context, runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "product")),"warranty"));
frame.set("warranty", t_2, true);
if(frame.topLevel) {
context.setVariable("warranty", t_2);
}
if(frame.topLevel) {
context.addExport("warranty", t_2);
}
output += "\n<div id=\"product-warranty-modal\" class=\"sellix-modal\" style=\"display: none\">\n  <div class=\"sellix-modal-header pb-4\">\n    ";
output += runtime.suppressValue(env.getFilter("t").call(context, "shop.shared.titles.productWarranty"), env.opts.autoescape);
output += "\n    <div class=\"sellix-modal-close\" >\n      <i class=\"fa-light fa-times\" style=\"color: var(--darkFontColor); font-size:1.25rem;\"></i>\n    </div>\n  </div>\n  <div class=\"sellix-modal-body\">\n";
env.getExtension("RenderSnippet")["run"](context,"Product: Warranty text",runtime.makeKeywordArgs({"product": runtime.contextOrFrameLookup(context, frame, "product")}), function(t_4,t_3) {
if(t_4) { cb(t_4); return; }
output += runtime.suppressValue(t_3, true && env.opts.autoescape);
output += "  </div>\n</div>\n\n<script type='application/javascript'>\n  $(document).ready(function () {\n    $('#product-warranty-modal .sellix-modal-close').on('click', function () {\n      $.modal.close();\n    });\n  });\n</script>\n";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
});
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};
