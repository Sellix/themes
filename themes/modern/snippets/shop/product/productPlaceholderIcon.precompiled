function root(env, context, frame, runtime, cb) {
var lineno = 0;
var colno = 0;
var output = "";
try {
var parentTemplate = null;
var t_1;
t_1 = (lineno = 0, colno = 15, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "uid"), "uid", context, []));
frame.set("id", t_1, true);
if(frame.topLevel) {
context.setVariable("id", t_1);
}
if(frame.topLevel) {
context.addExport("id", t_1);
}
var t_2;
t_2 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"product");
frame.set("product", t_2, true);
if(frame.topLevel) {
context.setVariable("product", t_2);
}
if(frame.topLevel) {
context.addExport("product", t_2);
}
var t_3;
t_3 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "product")),"type") || "UNDEFINED";
frame.set("type", t_3, true);
if(frame.topLevel) {
context.setVariable("type", t_3);
}
if(frame.topLevel) {
context.addExport("type", t_3);
}
var t_4;
t_4 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "product")),"licensing_enabled");
frame.set("isLicense", t_4, true);
if(frame.topLevel) {
context.setVariable("isLicense", t_4);
}
if(frame.topLevel) {
context.addExport("isLicense", t_4);
}
output += "\n";
(function(cb) {if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "product")),"isGroup")) {
env.getExtension("RenderSnippet")["run"](context,"Icons: No image Group", function(t_6,t_5) {
if(t_6) { cb(t_6); return; }
output += runtime.suppressValue(t_5, true && env.opts.autoescape);
cb()});
}
else {
(function(cb) {if(runtime.contextOrFrameLookup(context, frame, "isLicense")) {
env.getExtension("RenderSnippet")["run"](context,"Icons: No image License", function(t_8,t_7) {
if(t_8) { cb(t_8); return; }
output += runtime.suppressValue(t_7, true && env.opts.autoescape);
cb()});
}
else {
(function(cb) {if(runtime.contextOrFrameLookup(context, frame, "type") == "FILE") {
env.getExtension("RenderSnippet")["run"](context,"Icons: No image File", function(t_10,t_9) {
if(t_10) { cb(t_10); return; }
output += runtime.suppressValue(t_9, true && env.opts.autoescape);
cb()});
}
else {
(function(cb) {if(runtime.contextOrFrameLookup(context, frame, "type") == "INFO_CARD") {
env.getExtension("RenderSnippet")["run"](context,"Icons: No image Default", function(t_12,t_11) {
if(t_12) { cb(t_12); return; }
output += runtime.suppressValue(t_11, true && env.opts.autoescape);
cb()});
}
else {
(function(cb) {if(runtime.contextOrFrameLookup(context, frame, "type") == "SERIALS") {
env.getExtension("RenderSnippet")["run"](context,"Icons: No image Serials", function(t_14,t_13) {
if(t_14) { cb(t_14); return; }
output += runtime.suppressValue(t_13, true && env.opts.autoescape);
cb()});
}
else {
(function(cb) {if(runtime.contextOrFrameLookup(context, frame, "type") == "SERVICE") {
env.getExtension("RenderSnippet")["run"](context,"Icons: No image Service", function(t_16,t_15) {
if(t_16) { cb(t_16); return; }
output += runtime.suppressValue(t_15, true && env.opts.autoescape);
cb()});
}
else {
(function(cb) {if(runtime.contextOrFrameLookup(context, frame, "type") == "SUBSCRIPTION") {
env.getExtension("RenderSnippet")["run"](context,"Icons: No image Subscription", function(t_18,t_17) {
if(t_18) { cb(t_18); return; }
output += runtime.suppressValue(t_17, true && env.opts.autoescape);
cb()});
}
else {
env.getExtension("RenderSnippet")["run"](context,"Icons: No image Default", function(t_20,t_19) {
if(t_20) { cb(t_20); return; }
output += runtime.suppressValue(t_19, true && env.opts.autoescape);
cb()});
}
})(function(t_21) {
if(t_21) { cb(t_21); return; }cb()});
}
})(function(t_22) {
if(t_22) { cb(t_22); return; }cb()});
}
})(function(t_23) {
if(t_23) { cb(t_23); return; }cb()});
}
})(function(t_24) {
if(t_24) { cb(t_24); return; }cb()});
}
})(function(t_25) {
if(t_25) { cb(t_25); return; }cb()});
}
})(function(t_26) {
if(t_26) { cb(t_26); return; }cb()});
}
})(function(t_27) {
if(t_27) { cb(t_27); return; }if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
});
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};
