function root(env, context, frame, runtime, cb) {
var lineno = 0;
var colno = 0;
var output = "";
try {
var parentTemplate = null;
var t_1;
t_1 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"id") || (lineno = 0, colno = 26, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "uid"), "uid", context, []));
frame.set("id", t_1, true);
if(frame.topLevel) {
context.setVariable("id", t_1);
}
if(frame.topLevel) {
context.addExport("id", t_1);
}
var t_2;
t_2 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "themeProperties")),"inputs");
frame.set("inputsProps", t_2, true);
if(frame.topLevel) {
context.setVariable("inputsProps", t_2);
}
if(frame.topLevel) {
context.addExport("inputsProps", t_2);
}
output += "\n";
var t_3;
t_3 = (lineno = 3, colno = 30, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"show_password"),false]));
frame.set("showPassword", t_3, true);
if(frame.topLevel) {
context.setVariable("showPassword", t_3);
}
if(frame.topLevel) {
context.addExport("showPassword", t_3);
}
var t_4;
t_4 = (lineno = 4, colno = 32, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"enable_spy_mode"),true]));
frame.set("spyModeEnabled", t_4, true);
if(frame.topLevel) {
context.setVariable("spyModeEnabled", t_4);
}
if(frame.topLevel) {
context.addExport("spyModeEnabled", t_4);
}
var t_5;
t_5 = (lineno = 5, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"label"),""]));
frame.set("label", t_5, true);
if(frame.topLevel) {
context.setVariable("label", t_5);
}
if(frame.topLevel) {
context.addExport("label", t_5);
}
var t_6;
t_6 = (lineno = 6, colno = 22, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"name"),runtime.contextOrFrameLookup(context, frame, "id")]));
frame.set("name", t_6, true);
if(frame.topLevel) {
context.setVariable("name", t_6);
}
if(frame.topLevel) {
context.addExport("name", t_6);
}
var t_7;
t_7 = (lineno = 7, colno = 22, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"type"),runtime.contextOrFrameLookup(context, frame, "text")]));
frame.set("type", t_7, true);
if(frame.topLevel) {
context.setVariable("type", t_7);
}
if(frame.topLevel) {
context.addExport("type", t_7);
}
var t_8;
t_8 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"icon_name");
frame.set("iconName", t_8, true);
if(frame.topLevel) {
context.setVariable("iconName", t_8);
}
if(frame.topLevel) {
context.addExport("iconName", t_8);
}
var t_9;
t_9 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"icon_on_click");
frame.set("iconOnClick", t_9, true);
if(frame.topLevel) {
context.setVariable("iconOnClick", t_9);
}
if(frame.topLevel) {
context.addExport("iconOnClick", t_9);
}
var t_10;
t_10 = false;
frame.set("isVisible", t_10, true);
if(frame.topLevel) {
context.setVariable("isVisible", t_10);
}
if(frame.topLevel) {
context.addExport("isVisible", t_10);
}
var t_11;
t_11 = (lineno = 11, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"style"),""]));
frame.set("style", t_11, true);
if(frame.topLevel) {
context.setVariable("style", t_11);
}
if(frame.topLevel) {
context.addExport("style", t_11);
}
var t_12;
t_12 = (lineno = 12, colno = 26, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"disabled"),false]));
frame.set("disabled", t_12, true);
if(frame.topLevel) {
context.setVariable("disabled", t_12);
}
if(frame.topLevel) {
context.addExport("disabled", t_12);
}
var t_13;
t_13 = (lineno = 13, colno = 29, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"placeholder"),""]));
frame.set("placeholder", t_13, true);
if(frame.topLevel) {
context.setVariable("placeholder", t_13);
}
if(frame.topLevel) {
context.addExport("placeholder", t_13);
}
output += "\n";
var t_14;
t_14 = (lineno = 15, colno = 30, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_height"),48]));
frame.set("commonHeight", t_14, true);
if(frame.topLevel) {
context.setVariable("commonHeight", t_14);
}
if(frame.topLevel) {
context.addExport("commonHeight", t_14);
}
var t_15;
t_15 = (lineno = 16, colno = 34, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_show_border"),true]));
frame.set("commonShowBorder", t_15, true);
if(frame.topLevel) {
context.setVariable("commonShowBorder", t_15);
}
if(frame.topLevel) {
context.addExport("commonShowBorder", t_15);
}
var t_16;
t_16 = (lineno = 17, colno = 33, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_font_color"),"light_font_color"]));
frame.set("commonFontColor", t_16, true);
if(frame.topLevel) {
context.setVariable("commonFontColor", t_16);
}
if(frame.topLevel) {
context.addExport("commonFontColor", t_16);
}
var t_17;
t_17 = (lineno = 18, colno = 32, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_font_size"),16]));
frame.set("commonFontSize", t_17, true);
if(frame.topLevel) {
context.setVariable("commonFontSize", t_17);
}
if(frame.topLevel) {
context.addExport("commonFontSize", t_17);
}
var t_18;
t_18 = (lineno = 19, colno = 34, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_font_weight"),400]));
frame.set("commonFontWeight", t_18, true);
if(frame.topLevel) {
context.setVariable("commonFontWeight", t_18);
}
if(frame.topLevel) {
context.addExport("commonFontWeight", t_18);
}
var t_19;
t_19 = (lineno = 20, colno = 34, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_line_height"),24]));
frame.set("commonLineHeight", t_19, true);
if(frame.topLevel) {
context.setVariable("commonLineHeight", t_19);
}
if(frame.topLevel) {
context.addExport("commonLineHeight", t_19);
}
output += "\n";
var t_20;
t_20 = (lineno = 22, colno = 32, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_label_font_color"),"light_font_color"]));
frame.set("labelFontColor", t_20, true);
if(frame.topLevel) {
context.setVariable("labelFontColor", t_20);
}
if(frame.topLevel) {
context.addExport("labelFontColor", t_20);
}
var t_21;
t_21 = (lineno = 23, colno = 31, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_label_font_size"),14]));
frame.set("labelFontSize", t_21, true);
if(frame.topLevel) {
context.setVariable("labelFontSize", t_21);
}
if(frame.topLevel) {
context.addExport("labelFontSize", t_21);
}
var t_22;
t_22 = (lineno = 24, colno = 33, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_label_font_weight"),500]));
frame.set("labelFontWeight", t_22, true);
if(frame.topLevel) {
context.setVariable("labelFontWeight", t_22);
}
if(frame.topLevel) {
context.addExport("labelFontWeight", t_22);
}
var t_23;
t_23 = (lineno = 25, colno = 33, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_label_line_height"),17]));
frame.set("labelLineHeight", t_23, true);
if(frame.topLevel) {
context.setVariable("labelLineHeight", t_23);
}
if(frame.topLevel) {
context.addExport("labelLineHeight", t_23);
}
var t_24;
t_24 = (lineno = 26, colno = 28, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"common_label_text_align"),"start"]));
frame.set("labelAlign", t_24, true);
if(frame.topLevel) {
context.setVariable("labelAlign", t_24);
}
if(frame.topLevel) {
context.addExport("labelAlign", t_24);
}
output += "\n";
var t_25;
t_25 = (lineno = 28, colno = 37, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "inputsProps")),"text_field_background"),runtime.contextOrFrameLookup(context, frame, "background_accent_dark")]));
frame.set("textFieldBackground", t_25, true);
if(frame.topLevel) {
context.setVariable("textFieldBackground", t_25);
}
if(frame.topLevel) {
context.addExport("textFieldBackground", t_25);
}
output += "\n";
var t_26;
t_26 = "snippet-input-text";
frame.set("globalClass", t_26, true);
if(frame.topLevel) {
context.setVariable("globalClass", t_26);
}
if(frame.topLevel) {
context.addExport("globalClass", t_26);
}
var t_27;
t_27 = runtime.contextOrFrameLookup(context, frame, "id");
frame.set("localClass", t_27, true);
if(frame.topLevel) {
context.setVariable("localClass", t_27);
}
if(frame.topLevel) {
context.addExport("localClass", t_27);
}
output += "\n<style>\n  .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__label {\n    display: flex;\n    color: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "labelFontColor")), env.opts.autoescape);
output += ";\n    font-size: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "labelFontSize"), env.opts.autoescape);
output += "px;\n    font-weight: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "labelFontWeight"), env.opts.autoescape);
output += ";\n    line-height: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "labelLineHeight"), env.opts.autoescape);
output += "px;\n  }\n  .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__input-wrapper {\n    position: relative;\n  }\n  .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__input {\n    height: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "commonHeight"), env.opts.autoescape);
output += "px;\n    background: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "textFieldBackground")), env.opts.autoescape);
output += ";\n    border: ";
output += runtime.suppressValue((runtime.contextOrFrameLookup(context, frame, "commonShowBorder")?"1px solid var(--borderColor)":"none"), env.opts.autoescape);
output += ";\n    color: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "commonFontColor")), env.opts.autoescape);
output += ";\n    font-size: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "commonFontSize"), env.opts.autoescape);
output += "px;\n    font-weight: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "commonFontWeight"), env.opts.autoescape);
output += ";\n  }\n  .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__input::placeholder {\n    font-size: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "commonFontSize"), env.opts.autoescape);
output += "px;\n    font-weight: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "commonFontWeight"), env.opts.autoescape);
output += ";\n    line-height: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "commonLineHeight"), env.opts.autoescape);
output += "px;\n  }\n  .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__show-hide-password-icon {\n    position: absolute;\n    right: 0.5rem;\n    top: 0.75rem;\n    color: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "commonFontColor")), env.opts.autoescape);
output += ";\n  }\n</style>\n\n<div class=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "globalClass"), env.opts.autoescape);
output += " ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "\">\n";
if(runtime.contextOrFrameLookup(context, frame, "label")) {
output += "    <label\n      class=\"sellix-label ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "globalClass"), env.opts.autoescape);
output += "__label ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__label justify-content-";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "labelAlign"), env.opts.autoescape);
output += "\"\n      for=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "name"), env.opts.autoescape);
output += "\"\n    >\n      ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "label"), env.opts.autoescape);
output += "\n    </label>\n";
;
}
output += "\n  <div class=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "globalClass"), env.opts.autoescape);
output += "__input-wrapper ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__input-wrapper\">\n    <input\n      class=\"sellix-input ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "globalClass"), env.opts.autoescape);
output += "__input ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__input ";
output += runtime.suppressValue((runtime.contextOrFrameLookup(context, frame, "iconName")?"right-icon":""), env.opts.autoescape);
output += "\"\n      autoComplete=\"";
output += runtime.suppressValue((runtime.contextOrFrameLookup(context, frame, "type") == "email"?"":"off"), env.opts.autoescape);
output += "\"\n      type=\"";
output += runtime.suppressValue((runtime.contextOrFrameLookup(context, frame, "showPassword") && runtime.contextOrFrameLookup(context, frame, "isVisible")?"text":""), env.opts.autoescape);
output += runtime.suppressValue((runtime.contextOrFrameLookup(context, frame, "showPassword") && !runtime.contextOrFrameLookup(context, frame, "isVisible")?"password":""), env.opts.autoescape);
output += runtime.suppressValue((!runtime.contextOrFrameLookup(context, frame, "showPassword") && runtime.contextOrFrameLookup(context, frame, "type")?runtime.contextOrFrameLookup(context, frame, "type"):""), env.opts.autoescape);
output += runtime.suppressValue((!runtime.contextOrFrameLookup(context, frame, "type") && !runtime.contextOrFrameLookup(context, frame, "showPassword")?"text":""), env.opts.autoescape);
output += "\"\n      id=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "name"), env.opts.autoescape);
output += "\"\n      name=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "name"), env.opts.autoescape);
output += "\"\n      ";
output += runtime.suppressValue((runtime.contextOrFrameLookup(context, frame, "disabled")?"disabled":""), env.opts.autoescape);
output += "\n      placeholder=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "placeholder"), env.opts.autoescape);
output += "\"\n      style=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "style"), env.opts.autoescape);
output += ";\"\n    >\n";
(function(cb) {if(runtime.contextOrFrameLookup(context, frame, "iconName")) {
output += "      <div class=\"sellix_input-icon ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "globalClass"), env.opts.autoescape);
output += "__input-icon ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__input-icon\">\n";
env.getExtension("RenderSnippet")["run"](context,runtime.contextOrFrameLookup(context, frame, "iconName"), function(t_29,t_28) {
if(t_29) { cb(t_29); return; }
output += runtime.suppressValue(t_28, true && env.opts.autoescape);
output += "      </div>\n";
cb()});
}
else {
cb()}
})(function(t_30) {
if(t_30) { cb(t_30); return; }output += "\n";
(function(cb) {if(runtime.contextOrFrameLookup(context, frame, "showPassword") && runtime.contextOrFrameLookup(context, frame, "spyModeEnabled")) {
output += "      <div class=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "globalClass"), env.opts.autoescape);
output += "__show-hide-password-icon ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__show-hide-password-icon\">\n";
env.getExtension("RenderSnippet")["run"](context,"Icons: Crossed eye", function(t_32,t_31) {
if(t_32) { cb(t_32); return; }
output += runtime.suppressValue(t_31, true && env.opts.autoescape);
output += "      </div>\n";
cb()});
}
else {
cb()}
})(function(t_33) {
if(t_33) { cb(t_33); return; }output += "  </div>\n</div>\n\n<script type='application/javascript'>\n  $(document).ready(function () {\n    const $input = $('.";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__input');\n\n";
if(runtime.contextOrFrameLookup(context, frame, "showPassword")) {
output += "      $('.";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__show-hide-password-icon').on('click', function () {\n        const type = $input.attr('type');\n        if( type === 'password' ){\n          $input.attr('type', 'text');\n        } else {\n          $input.attr('type', 'password');\n        }\n      });\n";
;
}
output += "\n    $('.";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__input-icon').on('click', function (event) {\n      event.stopPropagation();\n";
if(runtime.contextOrFrameLookup(context, frame, "iconOnClick")) {
output += "        ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "iconOnClick"), env.opts.autoescape);
output += "($input.val());\n";
;
}
output += "    });\n  });\n</script>\n";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
})});
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};
