function root(env, context, frame, runtime, cb) {
var lineno = 0;
var colno = 0;
var output = "";
try {
var parentTemplate = null;
var t_1;
t_1 = (lineno = 0, colno = 13, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "uid"), "uid", context, []));
frame.set("id", t_1, true);
if(frame.topLevel) {
context.setVariable("id", t_1);
}
if(frame.topLevel) {
context.addExport("id", t_1);
}
var t_2;
t_2 = runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "global")),"common")),"feedbacksInfo")),"feedbacks");
frame.set("feedbacks", t_2, true);
if(frame.topLevel) {
context.setVariable("feedbacks", t_2);
}
if(frame.topLevel) {
context.addExport("feedbacks", t_2);
}
var t_3;
t_3 = 10;
frame.set("pageLimit", t_3, true);
if(frame.topLevel) {
context.setVariable("pageLimit", t_3);
}
if(frame.topLevel) {
context.addExport("pageLimit", t_3);
}
var t_4;
t_4 = 1;
frame.set("currentPage", t_4, true);
if(frame.topLevel) {
context.setVariable("currentPage", t_4);
}
if(frame.topLevel) {
context.addExport("currentPage", t_4);
}
output += "\n";
var t_5;
t_5 = (lineno = 5, colno = 26, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"page_size"),12]));
frame.set("pageSize", t_5, true);
if(frame.topLevel) {
context.setVariable("pageSize", t_5);
}
if(frame.topLevel) {
context.addExport("pageSize", t_5);
}
var t_6;
t_6 = (lineno = 6, colno = 25, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"background_color"),"background_accent_light"]));
frame.set("bgColor", t_6, true);
if(frame.topLevel) {
context.setVariable("bgColor", t_6);
}
if(frame.topLevel) {
context.addExport("bgColor", t_6);
}
var t_7;
t_7 = (lineno = 7, colno = 28, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"show_border"),false]));
frame.set("showBorder", t_7, true);
if(frame.topLevel) {
context.setVariable("showBorder", t_7);
}
if(frame.topLevel) {
context.addExport("showBorder", t_7);
}
var t_8;
t_8 = (lineno = 8, colno = 30, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"border_radius"),0]));
frame.set("borderRadius", t_8, true);
if(frame.topLevel) {
context.setVariable("borderRadius", t_8);
}
if(frame.topLevel) {
context.addExport("borderRadius", t_8);
}
var t_9;
t_9 = (lineno = 9, colno = 24, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"shadow"),"none"]));
frame.set("shadow", t_9, true);
if(frame.topLevel) {
context.setVariable("shadow", t_9);
}
if(frame.topLevel) {
context.addExport("shadow", t_9);
}
var t_10;
t_10 = (lineno = 10, colno = 30, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"padding_horiz"),0]));
frame.set("paddingHoriz", t_10, true);
if(frame.topLevel) {
context.setVariable("paddingHoriz", t_10);
}
if(frame.topLevel) {
context.addExport("paddingHoriz", t_10);
}
var t_11;
t_11 = (lineno = 11, colno = 29, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"padding_vert"),0]));
frame.set("paddingVert", t_11, true);
if(frame.topLevel) {
context.setVariable("paddingVert", t_11);
}
if(frame.topLevel) {
context.addExport("paddingVert", t_11);
}
output += "\n";
var t_12;
t_12 = (lineno = 13, colno = 28, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_background_color"),"background_accent_light"]));
frame.set("btnBgColor", t_12, true);
if(frame.topLevel) {
context.setVariable("btnBgColor", t_12);
}
if(frame.topLevel) {
context.addExport("btnBgColor", t_12);
}
var t_13;
t_13 = (lineno = 14, colno = 31, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_show_border"),false]));
frame.set("btnShowBorder", t_13, true);
if(frame.topLevel) {
context.setVariable("btnShowBorder", t_13);
}
if(frame.topLevel) {
context.addExport("btnShowBorder", t_13);
}
var t_14;
t_14 = (lineno = 15, colno = 33, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_border_radius"),8]));
frame.set("btnBorderRadius", t_14, true);
if(frame.topLevel) {
context.setVariable("btnBorderRadius", t_14);
}
if(frame.topLevel) {
context.addExport("btnBorderRadius", t_14);
}
var t_15;
t_15 = (lineno = 16, colno = 27, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_shadow"),"none"]));
frame.set("btnShadow", t_15, true);
if(frame.topLevel) {
context.setVariable("btnShadow", t_15);
}
if(frame.topLevel) {
context.addExport("btnShadow", t_15);
}
var t_16;
t_16 = (lineno = 17, colno = 33, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_padding_horiz"),0]));
frame.set("btnPaddingHoriz", t_16, true);
if(frame.topLevel) {
context.setVariable("btnPaddingHoriz", t_16);
}
if(frame.topLevel) {
context.addExport("btnPaddingHoriz", t_16);
}
var t_17;
t_17 = (lineno = 18, colno = 32, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_padding_vert"),0]));
frame.set("btnPaddingVert", t_17, true);
if(frame.topLevel) {
context.setVariable("btnPaddingVert", t_17);
}
if(frame.topLevel) {
context.addExport("btnPaddingVert", t_17);
}
output += "\n";
var t_18;
t_18 = (lineno = 20, colno = 30, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_text_font_color"),"dark_font_color"]));
frame.set("btnFontColor", t_18, true);
if(frame.topLevel) {
context.setVariable("btnFontColor", t_18);
}
if(frame.topLevel) {
context.addExport("btnFontColor", t_18);
}
var t_19;
t_19 = (lineno = 21, colno = 29, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_text_font_size"),14]));
frame.set("btnFontSize", t_19, true);
if(frame.topLevel) {
context.setVariable("btnFontSize", t_19);
}
if(frame.topLevel) {
context.addExport("btnFontSize", t_19);
}
var t_20;
t_20 = (lineno = 22, colno = 31, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_text_font_weight"),400]));
frame.set("btnFontWeight", t_20, true);
if(frame.topLevel) {
context.setVariable("btnFontWeight", t_20);
}
if(frame.topLevel) {
context.addExport("btnFontWeight", t_20);
}
var t_21;
t_21 = (lineno = 23, colno = 31, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"button_text_line_height"),20]));
frame.set("btnLineHeight", t_21, true);
if(frame.topLevel) {
context.setVariable("btnLineHeight", t_21);
}
if(frame.topLevel) {
context.addExport("btnLineHeight", t_21);
}
output += "\n";
var t_22;
t_22 = (lineno = 25, colno = 34, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"active_button_background_color"),"background_accent_dark"]));
frame.set("activeBtnBgColor", t_22, true);
if(frame.topLevel) {
context.setVariable("activeBtnBgColor", t_22);
}
if(frame.topLevel) {
context.addExport("activeBtnBgColor", t_22);
}
var t_23;
t_23 = (lineno = 26, colno = 36, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"active_button_text_font_color"),"brand_color"]));
frame.set("activeBtnFontColor", t_23, true);
if(frame.topLevel) {
context.setVariable("activeBtnFontColor", t_23);
}
if(frame.topLevel) {
context.addExport("activeBtnFontColor", t_23);
}
var t_24;
t_24 = (lineno = 27, colno = 35, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"active_button_text_font_size"),15]));
frame.set("activeBtnFontSize", t_24, true);
if(frame.topLevel) {
context.setVariable("activeBtnFontSize", t_24);
}
if(frame.topLevel) {
context.addExport("activeBtnFontSize", t_24);
}
var t_25;
t_25 = (lineno = 28, colno = 37, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "safe_get"), "safe_get", context, [runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "properties")),"active_button_text_font_weight"),500]));
frame.set("activeBtnFontWeight", t_25, true);
if(frame.topLevel) {
context.setVariable("activeBtnFontWeight", t_25);
}
if(frame.topLevel) {
context.addExport("activeBtnFontWeight", t_25);
}
output += "\n\n";
var t_26;
t_26 = runtime.contextOrFrameLookup(context, frame, "id");
frame.set("localClass", t_26, true);
if(frame.topLevel) {
context.setVariable("localClass", t_26);
}
if(frame.topLevel) {
context.addExport("localClass", t_26);
}
output += "\n";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "feedbacks")),"length") > runtime.contextOrFrameLookup(context, frame, "pageSize")) {
output += "  <style>\n    .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__container {\n      display: flex;\n      margin: 0 auto;\n      padding: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "paddingVert"), env.opts.autoescape);
output += "px ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "paddingHoriz"), env.opts.autoescape);
output += "px;\n      background: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "bgColor")), env.opts.autoescape);
output += ";\n      border: ";
output += runtime.suppressValue((runtime.contextOrFrameLookup(context, frame, "showBorder")?"1px solid var(--borderColor)":"none"), env.opts.autoescape);
output += ";\n      box-shadow: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "shadow"), env.opts.autoescape);
output += ";\n      border-radius: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "borderRadius"), env.opts.autoescape);
output += "px;\n    }\n\n    .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__container .item,\n    .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__container .prev,\n    .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__container .next {\n      cursor: pointer;\n      padding: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "btnPaddingVert"), env.opts.autoescape);
output += "px ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "btnPaddingHoriz"), env.opts.autoescape);
output += "px;\n      background: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "btnBgColor")), env.opts.autoescape);
output += ";\n      border: ";
output += runtime.suppressValue((runtime.contextOrFrameLookup(context, frame, "btnShowBorder")?"1px solid var(--borderColor)":"none"), env.opts.autoescape);
output += ";\n      box-shadow: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "btnShadow"), env.opts.autoescape);
output += ";\n      border-radius: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "btnBorderRadius"), env.opts.autoescape);
output += "px;\n\n      color: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "btnFontColor")), env.opts.autoescape);
output += ";\n      font-size: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "btnFontSize"), env.opts.autoescape);
output += "px;\n      font-weight: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "btnFontWeight"), env.opts.autoescape);
output += ";\n      line-height: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "btnLineHeight"), env.opts.autoescape);
output += "px;\n    }\n    .";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__container .item.active {\n      background: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "activeBtnBgColor")), env.opts.autoescape);
output += ";\n      color: ";
output += runtime.suppressValue(env.getFilter("get_color").call(context, runtime.contextOrFrameLookup(context, frame, "activeBtnFontColor")), env.opts.autoescape);
output += ";\n      font-size: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "activeBtnFontSize"), env.opts.autoescape);
output += "px;\n      font-weight: ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "activeBtnFontWeight"), env.opts.autoescape);
output += ";\n    }\n  </style>\n  <div class=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "globalClass"), env.opts.autoescape);
output += "__container ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__container\">\n    <div class=\"prev d-none\">\n      <i class=\"fa-solid fa-chevron-left\"></i>\n    </div>\n\n    <div class=\"next d-none\">\n      <i class=\"fa-solid fa-chevron-right\"></i>\n    </div>\n  </div>\n\n  <script type='application/javascript'>\n    $(document).ready(function () {\n      let feedbackPaginationInstance = new window.SellixFeedbackPagination(\n        ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "currentPage"), env.opts.autoescape);
output += ",\n        ";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "feedbacks")),"length"), env.opts.autoescape);
output += ",\n        ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "pageLimit"), env.opts.autoescape);
output += ",\n        ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "pageSize"), env.opts.autoescape);
output += "\n      );\n      const feedbackComponent = new SellixFeedbackPaginationComponent(\n        '.";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "localClass"), env.opts.autoescape);
output += "__container',\n        '.sellix-block.block-feedback-list',\n        feedbackPaginationInstance,\n        '";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "id"), env.opts.autoescape);
output += "',\n        ";
output += runtime.suppressValue(env.getFilter("safe").call(context, env.getFilter("dump").call(context, runtime.contextOrFrameLookup(context, frame, "renderOptions"))), env.opts.autoescape);
output += ",\n      );\n    });\n  </script>\n";
;
}
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};
