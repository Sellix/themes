{% set id = uid() %}
{% set theme = global.theme %}
{% set type = args.type if args.type else 'checkout' %}
{% set shop = global.common.shopInfo.shop %}
{% set cartEnabled = themeProperties.cart.is_enabled %}
{% set cartEffect = themeProperties.cart.effect %}
{% set properties = args.properties %}

{% set showCalculationDetails = safe_get(properties.show_calculation_details, false) %}
{% set showTitle = safe_get(properties.show_title, true) %}
{% set containerBgColor = safe_get(properties.container_background_color, 'transparent') %}
{% set containerShadow = safe_get(properties.container_shadow, 'none') %}
{% set containerBorderRadius = safe_get(properties.container_border_radius, 0) %}
{% set containerShowBorder = safe_get(properties.container_show_border, true) %}

{% set containerPaddingVertDesktop = safe_get(properties.container_padding_vert_desktop, 20) %}
{% set containerPaddingHorizDesktop = safe_get(properties.container_padding_horiz_desktop, 20) %}
{% set containerPaddingVertTablet = safe_get(properties.container_padding_vert_tablet, 16) %}
{% set containerPaddingHorizTablet = safe_get(properties.container_padding_horiz_tablet, 16) %}
{% set containerPaddingVertMobile = safe_get(properties.container_padding_vert_mobile, 16) %}
{% set containerPaddingHorizMobile = safe_get(properties.container_padding_horiz_mobile, 16) %}

{% set globalClass = ['snippet-purchase-details'] %}
{% set localClass = id %}

<style>
  .{{ localClass }} .sellix-product-card {
    background: {{ containerBgColor | get_color }};
    box-shadow: {{ containerShadow }};
    border-radius: {{ containerBorderRadius }}px;
    padding: 0;
    border: {{ "1px solid var(--borderColor)" if containerShowBorder else "none" }};
  }

  .{{ localClass }} .sellix-product-card .sellix-product-form-field .currency-title {
    background: {{ properties.container_background_color | get_color }};
  }

  .{{ localClass }} .sellix-product-card .sellix-product-title,
  .{{ localClass }} .sellix-product-card .sellix-product-body {
    padding: {{ containerPaddingVertDesktop }}px {{ containerPaddingHorizDesktop }}px;
  }

  @media (max-width: 768px) {
    .{{ localClass }} .sellix-product-card .sellix-product-title,
    .{{ localClass }} .sellix-product-card .sellix-product-body {
      padding: {{ containerPaddingVertTablet }}px {{ containerPaddingHorizTablet }}px;
    }
  }
  @media (max-width: 640px) {
    .{{ localClass }} .sellix-product-card .sellix-product-title,
    .{{ localClass }} .sellix-product-card .sellix-product-body {
      padding: {{ containerPaddingVertMobile }}px {{ containerPaddingHorizMobile }}px;
    }
  }
</style>

{% render_snippet 'App paypal' %}

<div class="{{ globalClass }} {{ localClass }} purchase-detail-wrapper">
  <div class="purchase-details"></div>
</div>

<script type='application/javascript'>
  $(document).ready(function () {
    const purchaseType = '{{type}}';
    const cart = window.SellixCartStoreFactory.getCart('{{shop.name}}');
    const isDark = {{args.isDark if args.isDark is defined else themeProperties.color_schema.dark_mode}};
    const { shopInfo, productInfo, customerInfo, isCustomDomain } = window.SellixContext.get('common');
    let product = (productInfo && productInfo.product);

    if (purchaseType === 'product') {
      const cartProduct = cart.getItemById(product.uniqid);
      if (cartProduct) {
        product.quantity = cartProduct.quantity;
      }
    }

    let bundles = [], bundle, productIds, products;
    {% for bundle in args.bundles %}
      bundle = {{ bundle | exclude_attributes(['products_bound']) | dump | safe }};
      productIds = [
        {% for product in bundle.products_bound %}
          '{{ product.uniqid }}',
        {% endfor %}
      ]
      products = SellixContext.getShopProducts(productIds);
      bundle.products_bound = products;
      bundles.push(bundle);
    {% endfor %}

    const purchaseDetailsComponent = new SellixPurchaseDetailsComponent({
      selector: '.{{ localClass }} .purchase-details',
      selectorCaptchaV2: '#purchase-detail-recaptcha-v2',
      shop: shopInfo.shop,
      cartEnabled: {{cartEnabled or 0}},
      cartEffect: '{{ cartEffect }}',
      isCustomDomain,
      purchaseType,
      affiliateConversions: customerInfo?.customer?.affiliate_revenue_conversions || {},
      cart,
      product: (product || {}),
      bundles,
      theme: {
        isDark,
        name: '{{ theme.name }}',
        scheme: '{{ theme.scheme }}',
        version: '{{ theme.version }}',
      },
      renderOptions: {{renderOptions | dump | safe}},
      options: {
        showTitle: {{ showTitle }},
        skipGatewaySelector: true,
        showCalculationDetails: {{ showCalculationDetails }},
      }
    });
  });
</script>