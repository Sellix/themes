{% set id = uid() %}
{% set shop = global.common.shopInfo.shop %}
{% set properties = args.properties %}
{% set cartEnabled = themeProperties.cart.is_enabled %}
{% set cartEffect = themeProperties.cart.effect if cartEnabled else 'none' %}
{% set group = args.group %}
{% set isPlaceholder = not group.image_name %}
{% set placeholderType = safe_get(properties.placeholder_type, undefined) %}
{% set image = cdn_link(group.cloudflare_image_id, 'shopItem') %}
{% set cardProps = themeProperties.cards %}
{% set count = args.count %}
{% set itemsPerRowType = safe_get(properties.items_per_row_type, 'static') %}

{% set showBadge = safe_get(properties.show_product_type_badge, true) %}
{% set showTag = safe_get(properties.show_product_type_tag, true) %}
{% set background = safe_get(properties.background_color, cardProps.product_card_background_color) %}
{% set border = '1px solid var(--borderColor)' if safe_get(properties.show_border, cardProps.product_card_show_border) else 'none' %}
{% set borderRadius = safe_get(properties.border_radius, cardProps.product_card_border_radius) %}
{% set shadow = safe_get(properties.shadow, cardProps.product_card_shadow) %}
{% set imageBorderRadius = safe_get(properties.image_border_radius, cardProps.product_card_image_border_radius) %}
{% set imageHeight = safe_get(properties.image_height, cardProps.product_card_image_height) %}
{% set infoPaddingHoriz = safe_get(properties.info_padding_horiz, cardProps.product_card_info_padding_horiz) %}
{% set infoPaddingVert = safe_get(properties.info_padding_vert, cardProps.product_card_info_padding_vert) %}

{% set titleFontcolor = safe_get(properties.title_font_color, cardProps.product_card_title_font_color) %}
{% set titleFontSize = safe_get(properties.title_font_size, cardProps.product_card_title_font_size) %}
{% set titleFontWeight = safe_get(properties.title_font_weight, cardProps.product_card_title_font_weight) %}
{% set titleLineHeight = safe_get(properties.title_line_height, cardProps.product_card_title_line_height) %}
{% set titleTextAlign = safe_get(properties.title_text_align, cardProps.product_card_title_text_align) %}

{% set descriptionFontColor = safe_get(properties.description_font_color, cardProps.product_card_description_font_color) %}
{% set descriptionFontSize = safe_get(properties.description_font_size, cardProps.product_card_description_font_size) %}
{% set descriptionFontWeight = safe_get(properties.description_font_weight, cardProps.product_card_description_font_weight) %}

{% set priceFontColor = safe_get(properties.price_font_color, cardProps.product_card_price_font_color) %}
{% set priceFontSize = safe_get(properties.price_font_size, cardProps.product_card_price_font_size) %}
{% set priceFontWeight = safe_get(properties.price_font_weight, cardProps.product_card_price_font_weight) %}

{% set priceProperties = {
  price_font_color: priceFontColor,
  price_font_weight: priceFontWeight,
  price_font_size: priceFontSize
} %}

{% set globalClass =  'snippet-product-card' %}
{% set localClass = id %}

<style>
  .{{ localClass }}__container {
    border: {{ border }};
    border-radius: {{ borderRadius }}px;
    box-shadow: {{ shadow }};
  }
  .{{ localClass }}__card {
    background: {{ background | get_color }};
  }
  .{{ localClass }}__title {
    color: {{ titleFontcolor | get_color }};
    font-size: {{ titleFontSize }}px;
    font-weight: {{ titleFontWeight }};
    line-height: {{ titleLineHeight }}px;
  }
  .{{ localClass }}__info {
    padding: {{ infoPaddingVert }}px {{ infoPaddingHoriz }}px;
  }
  .{{ localClass }}__description {
    color: {{ descriptionFontColor | get_color }};
    font-size: {{ descriptionFontSize }}px;
    font-weight: {{ descriptionFontWeight }};
  }
  .{{ localClass }}__price {
    color: {{ priceFontColor | get_color }};
    font-size: {{ priceFontSize }}px;
    font-weight: {{ priceFontWeight }};
  }
  .{{ localClass }}__image {
    min-height: {{ imageHeight }}px;
    height: {{ imageHeight }}px;
  }
  .{{ localClass }}__image, .{{ localClass }}__image img {
    border-radius: {{ imageBorderRadius }}px;
    border-top-left-radius: {{ imageBorderRadius or borderRadius }}px;
    border-top-right-radius: {{ imageBorderRadius or borderRadius }}px;
  }

  .group-card-block .snippet-product-card__title {
    font-weight: 600;
  }

</style>

<div class="{{ globalClass }} {{ localClass }} {{ 'single-card' if count == 1 and itemsPerRowType == 'dynamic' }} d-flex w-100 position-relative">
  <div class="{{ globalClass }}__container {{ localClass }}__container" data-group-id="{{group.uniqid}}">
    {% if showBadge %}
      <div class="{{ globalClass }}__badge-container">
        <div class="{{ globalClass }}__badge">
          {{ 'shop.shared.titles.productType.group' | t }}
        </div>
      </div>
    {% endif %}

    <div class="{{ globalClass }}__card {{ localClass }}__card unselectable">
      <div class="{{ globalClass }}__image {{ localClass }}__image {{'image-placeholder' if isPlaceholder}} {{ placeholderType }}">
        {% if isPlaceholder %}
          {% render_snippet 'Product: Placeholder icon', product=group, dark=(true if placeholderType == 'dark' else undefined) %}
        {% else %}
          <img src="{{image}}" alt="{{group.title}}" loading="lazy" />
        {% endif %}
      </div>

      <div class="{{ globalClass }}__info {{ localClass }}__info">
        <div class="{{ globalClass }}__description {{ localClass }}__description">
          {% if group.min_price_item %}
            <div class="{{ globalClass }}__group-description-info">
              <span class="{{ globalClass }}__starting-at">
                {{ 'shop.shared.titles.startingAt' | t }}
              </span>

              <span class="{{ globalClass }}__price {{ localClass }}__price">
               {% render_snippet
                 'Shared: Price',
                 currency=group.min_price_item.currency,
                 price=group.min_price,
                 show_image=true,
                 show_initial_price='last',
                 properties=priceProperties
               %}
              </span>
            </div>
          {% else %}
            <span>
              {{ 'shop.main.cards.group.outOfProducts' | t }}
            </span>
          {% endif %}
        </div>

        <div class="{{ globalClass }}__title {{ localClass }}__title justify-content-{{ titleTextAlign }}">
          {{group.title}}
        </div>

        {% if group.min_price_item %}
          <span class="{{ globalClass }}__tax {{ localClass }}__tax"></span>
        {% endif %}
      </div>
    </div>
  </div>
</div>

<script type='application/javascript'>
  $(document).ready(function () {
    const cart = window.SellixCartStoreFactory.getCart('{{shop.name}}');

    $('.{{ localClass }}__container').on('click', function () {
      const groupId = $(this).data('group-id');
      const items = SellixContext.getShopItems();
      const group = items.find(({uniqid}) => String(uniqid) === String(groupId));

      if (group && group.products_bound.length) {
        $(document).trigger('SellixSetActiveModalGroup', { groupId });
        $('#group-card-modal').modal({
          groupModalId: '{{ id }}',
          cartItemIds: new Set(cart.getItems().map((item) => item.uniqid)),
          modalClass: '',
          blockerClass: 'sellix-overlay',
          showClose: false,
        });
      }
    });

    $(document).on($.modal.AFTER_CLOSE, (event, context) => {
      if ('{{ cartEffect }}' !== 'open_cart_modal') {
        // effect is not enabled
        return;
      }

      const { options } = context;
      if (options.groupModalId !== '{{ id }}') {
        // another group modal
        return;
      }

      const set1 = options.cartItemIds || new Set([]);
      const set2 = new Set(cart.getItems().map((item) => item.uniqid));
      const diff = new Set([
        ...[...set1].filter(x => !set2.has(x)),
        ...[...set2].filter(x => !set1.has(x)),
      ]);

      if (diff.size > 0) {
        $(document).trigger('SellixOpenCheckoutModal', { showContinueShoppingButton: true });
      }
    });

    {% if global.request.type === 'group' and global.request.options.itemId === group.uniqid %}
      setTimeout(function() {
        $('.{{ localClass }}__container').click();
      }, 0);
    {% endif %}
  });
</script>

<script type='application/javascript'>
  $(document).ready(function () {
    const shopInfo = SellixContext.getShopInfo();
    const ipcountry = Cookies.get('ipcountry') || '';

    let taxAmount = +shopInfo.shop.vat_percentage ? +shopInfo.shop.vat_percentage : '';
    if (shopInfo.shop.tax_configuration === 'EU' || shopInfo.shop.tax_configuration === 'CUSTOM') {
      if (shopInfo.shop.tax_configuration_data && ipcountry) {
        const countryTaxData = shopInfo.shop.tax_configuration_data.find(({ country, type }) => country === ipcountry);
        if (countryTaxData) {
          taxAmount = countryTaxData.tax_percentage;
        }
      }
    }

    if (shopInfo.shop.display_tax_on_storefront && taxAmount) {
      taxAmount = parseFloat(Number(taxAmount).toFixed(2));
      $('.{{ localClass }}__tax').append(`<span>${taxAmount}% {{ 'shop.main.cards.product.tax' | t }}</span>`);
    }
  });
</script>