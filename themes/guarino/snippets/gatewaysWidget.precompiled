function root(env, context, frame, runtime, cb) {
var lineno = 0;
var colno = 0;
var output = "";
try {
var parentTemplate = null;
var t_1;
t_1 = (lineno = 0, colno = 15, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "uid"), "uid", context, []));
frame.set("id", t_1, true);
if(frame.topLevel) {
context.setVariable("id", t_1);
}
if(frame.topLevel) {
context.addExport("id", t_1);
}
output += "\n<div id='gateways-widget-";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "id"), env.opts.autoescape);
output += "'></div>\n\n<script type='application/javascript'>\n  $(document).ready(function () {\n    let gateway = null, APM = null;\n    const handleChangeGateway = function(newGateway, newAPM) {\n      gateway = newGateway;\n      APM = newAPM;\n    }\n\n    const domContainer = document.querySelector('#gateways-widget-";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "id"), env.opts.autoescape);
output += "');\n    ReactDOM.render(\n      React.createElement(Purchase.GatewaySelector, {\n        onChangeGateway: handleChangeGateway,\n        gateway: gateway,\n        stripeAvailable: [],\n        paymentOptions: ['BITCOIN', 'LITECOIN', 'USDC:BEP20'],\n        router: {\n          pathname: '";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "global")),"request")),"type"), env.opts.autoescape);
output += "',\n        },\n        theme: {\n          isDark: ";
output += runtime.suppressValue((env.getTest("defined").call(context, runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"isDark")) === true?runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "args")),"isDark"):runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "themeProperties")),"color_schema")),"dark_mode")), env.opts.autoescape);
output += ",\n        },\n        config: window.__RENDER_CONTEXT__.config,\n      }),\n      domContainer,\n    );\n  });\n</script>";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};
