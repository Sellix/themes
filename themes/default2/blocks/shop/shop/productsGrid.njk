{% set id = uid() %}
{% set shopInfo = global.common.shopInfo %}
{% set shop = shopInfo.shop %}
{% set theme = global.common.theme %}
{% set centerProduct = shop.center_product_titles %}
{% set centerGroup = shop.center_group_titles %}

{% set limit = safe_get(properties.grid_limit, 0) | int %}
{% set filterName = safe_get(properties.filter_name, id) %}
{% set showGroup = safe_get(properties.grid_show_group, true) %}
{% set showInfo = safe_get(properties.grid_show_info, true) %}
{% set showProduct = safe_get(properties.grid_show_product, true) %}
{% set showSubscription = safe_get(properties.grid_show_subscription, true) %}

{% set items = [] %}
{% for itemId in shopInfo.items %}
  {% set item = shopInfo.products[itemId] %}
  {% if item.isGroup and showGroup %}
    {% set items = (items.push(item), items) %}
  {% elif item.isInfo and showInfo %}
    {% set items = (items.push(item), items) %}
  {% elif item.isProduct and showProduct %}
    {% set items = (items.push(item), items) %}
  {% elif item.isSubscription and showSubscription %}
    {% set items = (items.push(item), items) %}
  {% else %}
  {% endif %}
{% endfor %}

{% set colors = themeProperties.current_colors %}

{% set hideOutOfStock = shop.hide_out_of_stock %}

{% set containerShadow = safe_get(properties.container_shadow, 'none') %}
{% set containerBorderRadius = safe_get(properties.container_border_radius, '0.5') %}
{% set backgroundColor = safe_get(properties.grid_background_color, 'transparent') %}
{% set showBorder = safe_get(properties.grid_show_border, true) %}
{% set paddingVert = safe_get(properties.container_padding_vert, 0) %}
{% set paddingHoriz = safe_get(properties.container_padding_horiz, 0) %}
{% set columnGap = safe_get(properties.grid_column_gap, 30) %}
{% set rowGap = safe_get(properties.grid_row_gap, 30) %}
{% set itemsPerRowDesktop = safe_get(properties.grid_items_per_row_desktop, 4) | int %}
{% set itemsPerRowTablet = safe_get(properties.grid_items_per_row_tablet, 2) | int %}
{% set itemsPerRowMobile = safe_get(properties.grid_items_per_row_mobile, 1) | int %}

{% set localClass = [globalClass, '-', id] | join %}

<style>
  .{{ localClass }}__container {
    background: {{ colors[backgroundColor] }};
    border: {{ "1px solid var(--borderColor)" if showBorder else "none" }};
    padding: {{ paddingVert }}px {{ paddingHoriz }}px;
    box-shadow: {{ containerShadow }};
    border-radius: {{ containerBorderRadius }}px;

    display: grid;
    grid-template-columns: repeat({{ itemsPerRowDesktop }}, 1fr);
    grid-column-gap: {{ columnGap }}px;
    grid-row-gap: {{ rowGap }}px;
  }
  @media (max-width: 768px) {
    .{{ localClass }}__container {
      grid-template-columns: repeat({{ itemsPerRowTablet }}, 1fr);
    }
  }
  @media (max-width: 640px) {
    .{{ localClass }}__container {
      grid-template-columns: repeat({{ itemsPerRowMobile }}, 1fr);
    }
  }

  .grid-one-column {
    grid-template-columns: repeat(1, 1fr)!important;
  }
</style>

<div class="{{ globalClass }}__container {{ localClass }}__container {{ 'grid-one-column' if items.length == 0 }}">
  {% set visibleProductsCnt = 0 %}
  {% for item in items %}
    {% if limit > 0 and visibleProductsCnt >= limit %}
      {# Skip items out of limit #}
    {% else %}
      {% if hideOutOfStock and item.type !== "INFO_CARD" and item.stock === 0 %}
        {# hide Out of stock products #}
      {% elif item.unlisted == 1 %}
        {# hide unlisted products #}
      {% else %}
        {% set visibleProductsCnt = visibleProductsCnt + 1 %}
        <div
          data-product-id="{{item.uniqid}}"
          class="{{ globalClass }}__cards {{ localClass }}__cards"
        >
          {% if item.isInfo %}
            {% render_snippet 'Card: Info', product=item, theme=theme, centerProduct=centerProduct %}
          {% elif item.isSubscription %}
            {% render_snippet 'Card: Subscription', product=item, theme=theme, centerProduct=centerProduct %}
          {% elif item.isProduct %}
            {% render_snippet 'Card: Product', product=item, theme=theme, centerProduct=centerProduct %}
          {% elif item.isGroup %}
            {% render_snippet 'Card: Group', group=item, theme=theme, centerGroup=centerGroup %}
          {% endif %}
        </div>
      {% endif %}
    {% endif %}
  {% endfor %}

  <div
    class="{{ localClass}}__empty-container {{ globalClass}}__empty-container empty-search {{ 'd-none' if items.length > 0 }}"
  >
    {% render_snippet 'Icons: Zoom glass' %}

    <div class="empty-shop-info">
        {{ 'shop.main.productList.items.noProductFound' | t }}.

        <button class="button button-primary">
          {{ 'shop.main.productList.items.clear' | t }}
        </button>
    </div>
  </div>

  <div class="{{ localClass}}__empty-container {{ globalClass}}__empty-container empty-category d-none">
    {% render_snippet 'Icons: Zoom glass' %}

    <div class="empty-shop-info">
        {{ 'shop.main.productList.items.categoryNoProducts' | t }}.

        <button class="button button-primary">
          {{ 'shop.main.productList.items.clear' | t }}
        </button>
    </div>
  </div>
</div>

<script type='application/javascript'>
  $(document).ready(function () {
    const sortByDefault = (a, b) => items.findIndex((it) => it.uniqid === a.uniqid) - items.findIndex((it) => it.uniqid === b.uniqid);
    const sortByPrice = (a, b) => (a.minPriceItem ? +a.minPriceItem.price_display : 9999999) - (b.minPriceItem ? +b.minPriceItem.price_display : 9999999);
    const sortByName = (a, b) => a.title < b.title ? -1 : a.title > b.title ? 1 : 0;
    const sortByType = (a, b) => b.isGroup - a.isGroup;
    const sortByStock = (a, b) => b.stock - a.stock;

    const sortFunc = {
      "DEFAULT": sortByDefault,
      "PRICE": sortByPrice,
      "NAME": sortByName,
      "TYPE": sortByType,
      "STOCK": sortByStock
    };

    const shopInfo = SellixContext.getShopInfo();
    const items = filterItems(SellixContext.getShopItems());
    const categories = SellixContext.getShopCategories();
    const itemsMap = items.reduce((m, item) => ({...m, [item.uniqid]: item}), {});

    function filterItems(items) {
      return items.filter((item) => {
        return (item.isGroup && {{ showGroup }}) || (item.isInfo && {{ showInfo }}) ||
          (item.isProduct && {{ showProduct }}) || (item.isSubscription && {{ showSubscription }})
      })
    }

    function filterProducts({ search, category, sort }) {
      search = search || '';

      let filteredItems = items;

      if (category !== 'all') {
        const categoryObj = categories.filter((cat) => cat.uniqid === category)?.[0];
        if (categoryObj) {
          filteredItems = [...categoryObj.products_bound, ...categoryObj.groups_bound];
        }
      }

      filteredItems = filteredItems.filter(item => {
        let hasProduct = false;
        if(item.isGroup) {
          if(item.products_bound && item.products_bound.length) {
            hasProduct = item.products_bound.find(({ title }) => title.toLowerCase().includes(search.toLowerCase()));
          }
        }

        return hasProduct || item.title.toLowerCase().includes(search.toLowerCase());
      });

      filteredItems = filterItems(filteredItems);

      const filteredItemIds = filteredItems.map(item => item.uniqid);
      $('.{{ localClass }}__cards[data-product-id]')
        .hide()
        .filter((idx, el) => filteredItemIds.includes($(el).data('product-id')))
        .show();

      if (filteredItemIds.length === 0) {
        $('.{{ localClass }}__container').addClass('grid-one-column')
        if (category) {
          $('.{{ localClass }}__empty-container.empty-category .category-name').text(category.title);
          $('.{{ localClass }}__empty-container.empty-category').removeClass('d-none');
        } else {
          $('.{{ localClass }}__empty-container.empty-search').removeClass('d-none');
        }
      } else {
        $('.{{ localClass }}__container').removeClass('grid-one-column')
        $('.{{ localClass }}__empty-container').addClass('d-none');
      }

      if (sort) {
        const sf = sortFunc[sort] ?? sortFunc.DEFAULT;
        const sorted = $('.{{ localClass }}__cards[data-product-id]').detach().sort((a, b) => {
          const prA = itemsMap[$(a).data('product-id')];
          const prB = itemsMap[$(b).data('product-id')];
          return sf(prA, prB);
        });
        $('.{{ localClass }}__container').append(sorted);
      }
    }

    $(document).on('SellixProductListFilterChangeEvent', (e, eventInfo) => {
      const { name } = eventInfo;
      if (name === '{{ filterName }}') {
        filterProducts(eventInfo);
      }
    });
  });
</script>
