{% set id = uid() %}
{% set shopInfo = global.common.shopInfo %}
{% set shop = shopInfo.shop %}
{% set theme = global.common.theme %}
{% set centerProduct = shop.center_product_titles %}
{% set centerGroup = shop.center_group_titles %}
{% set items = shopInfo.items %}
{% set colors = themeProperties.current_colors %}

{% set hideOutOfStock = shop.hide_out_of_stock %}

{% set globalClass = 'block-product-list-items' %}
{% set localClass = [globalClass, '-', id] | join %}

<style>
  .{{ localClass }} {
    background: {{ colors[properties.list_items_background_color] }};
    border: {{ "1px solid var(--borderColor)" if properties.list_items_show_border else "none" }};
    padding: {{ properties.container_padding_vert }}px {{ properties.container_padding_horiz }}px;
    box-shadow: {{ properties.container_shadow }};
    border-radius: {{ properties.container_border_radius }}rem;
  }
  .{{ localClass }}__cards {
    width: {{ 100 / properties.list_items_per_row_wide | int }}%
  }

  @media (max-width: 768px) {
    .{{ localClass }}__cards {
      width: {{ 100 / properties.list_items_per_row_normal | int }}%
    }
  }

  @media (max-width: 640px) {
    .{{ localClass }}__cards {
      width: {{ 100 / properties.list_items_per_row_narrow | int }}%
    }
  }
</style>

<div class="{{ globalClass }}__container {{ localClass }}">
  {% for item in items %}
    {% if hideOutOfStock and item.type !== "INFO_CARD" and item.stock === 0 %}
      {# hide Out of stock products #}
    {% elif item.unlisted == 1 %}
      {# hide unlisted products #}
    {% else %}
      <div
        data-product-id="{{item.uniqid}}"
        class="{{ globalClass }}__cards {{ localClass }}__cards"
      >
        {% if item.isInfo %}
          {% render_snippet 'Card: Info', product=item, theme=theme, centerProduct=centerProduct %}
        {% elif item.isSubscription %}
          {% render_snippet 'Card: Subscription', product=item, theme=theme, centerProduct=centerProduct %}
        {% elif item.isProduct %}
          {% render_snippet 'Card: Product', product=item, theme=theme, centerProduct=centerProduct %}
        {% elif item.isGroup %}
          {% render_snippet 'Card: Group', group=item, theme=theme, centerGroup=centerGroup %}
        {% endif %}
      </div>
    {% endif %}
  {% endfor %}

  <div
    class="{{ localClass}}__empty-container {{ globalClass}}__empty-container empty-search {{ 'd-none' if items.length > 0 }}"
  >
    {% render_snippet 'Icons: Zoom glass' %}

    <div class="empty-shop-info">
        {{ 'shop.main.productList.items.noProducts' | t }}.

        <button class="button button-primary">
          {{ 'shop.main.productList.items.clear' | t }}
        </button>
    </div>
  </div>

  <div class="{{ localClass}}__empty-container {{ globalClass}}__empty-container empty-category d-none">
    {% render_snippet 'Icons: Zoom glass' %}

    <div class="empty-shop-info">
        {{ 'shop.main.productList.items.categoryNoProducts' | t }}.

        <button class="button button-primary">
          {{ 'shop.main.productList.items.clear' | t }}
        </button>
    </div>
  </div>
</div>

<script type='application/javascript'>
  $(document).ready(function () {
    const sortByDefault = (a, b) => items.findIndex((it) => it.uniqid === a.uniqid) - items.findIndex((it) => it.uniqid === b.uniqid);
    const sortByPrice = (a, b) => (a.minPriceItem ? +a.minPriceItem.price_display : 9999999) - (b.minPriceItem ? +b.minPriceItem.price_display : 9999999);
    const sortByName = (a, b) => a.title < b.title ? -1 : a.title > b.title ? 1 : 0;
    const sortByType = (a, b) => b.isGroup - a.isGroup;
    const sortByStock = (a, b) => b.stock - a.stock;

    const sortFunc = {
      "DEFAULT": sortByDefault,
      "PRICE": sortByPrice,
      "NAME": sortByName,
      "TYPE": sortByType,
      "STOCK": sortByStock
    };

    const shopInfo = SellixContext.get('common', {}).shopInfo || {};
    const items = shopInfo.items || [];
    const categories = shopInfo.categories || [];
    const itemsMap = items.reduce((m, item) => ({...m, [item.uniqid]: item}), {});

    function filterProducts({ search, category, sort }) {
      search = search || '';

      let filteredItems = items;

      if (category !== 'all') {
        const categoryObj = categories.filter((cat) => cat.uniqid === category)?.[0];
        if (categoryObj) {
          filteredItems = [...categoryObj.products_bound, ...categoryObj.groups_bound];
        }
      }

      filteredItems = filteredItems.filter(item => {
        let hasProduct = false;
        if(item.isGroup) {
          if(item.products_bound && item.products_bound.length) {
            hasProduct = item.products_bound.find(({ title }) => title.toLowerCase().includes(search.toLowerCase()));
          }
        }

        return hasProduct || item.title.toLowerCase().includes(search.toLowerCase());
      });
      const filteredItemIds = filteredItems.map(item => item.uniqid);
      $('.{{ localClass }}__cards[data-product-id]')
        .hide()
        .filter((idx, el) => filteredItemIds.includes($(el).data('product-id')))
        .show();

      $('.{{ localClass }}__empty-container').addClass('d-none');
      if (filteredItemIds.length === 0) {
        if (category) {
          $('.{{ localClass }}__empty-container.empty-category .category-name').text(category.title);
          $('.{{ localClass }}__empty-container.empty-category').removeClass('d-none');
        } else {
          $('.{{ localClass }}__empty-container.empty-search').removeClass('d-none');
        }
      }

      if (sort) {
        const sf = sortFunc[sort] ?? sortFunc.DEFAULT;
        const sorted = $('.{{ localClass }}__cards[data-product-id]').detach().sort((a, b) => {
          const prA = itemsMap[$(a).data('product-id')];
          const prB = itemsMap[$(b).data('product-id')];
          return sf(prA, prB);
        });
        $('.{{ localClass }}').append(sorted);
      }
    }

    $(document).on('SellixProductListFilterChangeEvent', (e, eventInfo) => {
      filterProducts(eventInfo);
    });
  });
</script>
