{% set id = uid() %}
{% set colors = themeProperties.current_colors %}
{% set properties = args.properties %}
{% set inputsProps = themeProperties.inputs %}
{% set localesList = [] %}
{% for locale, localeInfo in global.locales.supportedLocales %}
  {% set localesList = (localesList.push(localeInfo), localesList) %}
{% endfor %}

<style>
  .language-selector-{{ id }} .select2-container--sellix-lng-selector .select2-selection--single {
    background-color: {{ colors[inputsProps.select_background] }}!important;
  }

  .language-selector-{{ id }} .select2-container--sellix-lng-selector .select2-selection__rendered {
    color: {{ colors[inputsProps.common_font_color] }};
    font-size: {{ inputsProps.common_font_size }}px;
    font-weight: {{ inputsProps.common_font_weight }};
  }

  .select2-container--sellix-lng-selector .select2-dropdown {
    border: {{ "1px solid var(--borderColor)" if inputsProps.dropdown_show_border else "none" }} !important;
    background-color: {{ colors[inputsProps.select_background] }} !important;
  }

  .select2-container--sellix-lng-selector .select2-results__option {
    font-size: {{ inputsProps.dropdown_option_font_size }}px !important;
    font-weight: {{ inputsProps.dropdown_option_font_weight }};
    color: {{ colors[inputsProps.dropdown_option_font_color] }} !important;
  }

  .select2-container--sellix-lng-selector .select2-results__option.select2-results__option--highlighted {
    background-color: {{ colors[inputsProps.dropdown_option_background_hover] }} !important;
  }

  .select2-container--sellix-lng-selector .select2-results__option[aria-selected='true'] {
    background-color: {{ colors[inputsProps.dropdown_active_option_background] }} !important;
    color: {{ colors[inputsProps.dropdown_active_option_font_color] }} !important;
  }
</style>

<div class="language-selector-{{ id }} d-none">
  <select id="language-selector" class="testetetes">
    {% for localeInfo in localesList | sort(false, false, 'title') %}
      <option
        value="{{ localeInfo.code }}"
        {{'selected' if localeInfo.code == global.locales.locale else ''}}
        data-img-url="{{ localeInfo.imgUrl }}"
      >
        {{- localeInfo.title -}}
      </option>
    {% endfor %}
  </select>
</div>

<script type='application/javascript'>
  function optionFactory(state) {
    const $element = $(state.element);
    const imgUrl = $element.data("imgUrl");
    if (!state.id) {
      return state.text;
    }

    return $(`<span style="display: flex; align-items: center; overflow: hidden;">
        ${imgUrl ? `<img style="height:18px;width: 18px; margin-right: 8px;" src="${imgUrl}" />` : ''}
        ${state.text}
      </span>`);
  }

  $(document).ready(function() {
    $('#language-selector').select2({
      minimumResultsForSearch: Infinity,
      templateSelection: optionFactory,
      templateResult: optionFactory,
      escapeMarkup: function(m) {
        return m;
      },
      theme: 'sellix-lng-selector',
    })
    .on('select2:select', (e) => {
      const oldLocale = '{{ global.locales.locale }}';
      const newLocale = e.params.data.id;
      if (oldLocale !== newLocale) {
        const pathParts = window.location.pathname.split('/').filter((p) => !!p);
        if (pathParts.length && pathParts[0] === oldLocale) {
          pathParts.shift();
        }

        if (newLocale !== '{{ global.locales.defaultLocale }}') {
          pathParts.unshift(newLocale);
        }

        window.location.href = `/${pathParts.join('/')}` + (pathParts.length === 1 ? '/' : '');
      }
    });

    $('.language-selector-{{ id }}').removeClass('d-none');
  });
</script>
